openapi: 3.0.3
info:
  title: User Service API
  version: 1.0.0
  description: Identity, authentication, and RBAC endpoints
servers:
  - url: https://api.example.com
paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '202':
          description: Registered, verification email queued
        '409':
          description: Email already exists
  /users/verify-email:
    post:
      summary: Verify email with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified
        '400':
          description: Invalid or expired token
  /users/login:
    post:
      summary: Login with email & password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Tokens issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid credentials
  /users/token/refresh:
    post:
      summary: Rotate refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid or revoked token
  /users/me:
    get:
      security:
        - bearerAuth: []
      summary: Get current user profile
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      security:
        - bearerAuth: []
      summary: Update current user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/me/change-password:
    post:
      security:
        - bearerAuth: []
      summary: Change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
      responses:
        '204':
          description: Changed
        '400':
          description: Weak password
        '401':
          description: Wrong password
  /users/forgot-password:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '202':
          description: Reset email queued
  /users/reset-password:
    post:
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '204':
          description: Reset
        '400':
          description: Invalid/expired token
  /admin/users:
    get:
      security:
        - bearerAuth: []
      summary: List users
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Paged list
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
  /admin/users/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/users/{id}/roles:
    get:
      security:
        - bearerAuth: []
      summary: List roles for user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      security:
        - bearerAuth: []
      summary: Assign roles to user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '204':
          description: Assigned
    delete:
      security:
        - bearerAuth: []
      summary: Revoke roles from user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '204':
          description: Revoked
  /admin/roles:
    get:
      security:
        - bearerAuth: []
      summary: List roles
      responses:
        '200':
          description: Roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      security:
        - bearerAuth: []
      summary: Create role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /admin/roles/{id}:
    delete:
      security:
        - bearerAuth: []
      summary: Delete role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
  /admin/roles/{id}/permissions:
    get:
      security:
        - bearerAuth: []
      summary: List permissions for role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Perms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    put:
      security:
        - bearerAuth: []
      summary: Set permissions for role (replace)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '204':
          description: Updated
  /admin/permissions:
    get:
      security:
        - bearerAuth: []
      summary: List permissions
      responses:
        '200':
          description: Perms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    post:
      security:
        - bearerAuth: []
      summary: Create permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum:
            - pending
            - active
            - disabled
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        desc:
          type: string
    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        desc:
          type: string
    CreateRoleRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        desc:
          type: string
    CreatePermissionRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        desc:
          type: string
